import pandas as pd
import os
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from datetime import datetime
from config.config import *

#Fun√ß√£o que registra erros em um log
def registrar_erro(mensagem):
    log_dir = os.path.join( '..', DIRETORIO_LOGS)
    os.makedirs(log_dir, exist_ok=True)

    log_path = os.path.join(log_dir, 'erros.log')
    with open(log_path, 'a', encoding='utf-8') as f:
        f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {mensagem}\n")

#Carrega os dados do arquivo csv gerado ap√≥s converter a planilha em csv
def carregar_dados(caminho):
    try:
        df = pd.read_csv(caminho)
        if df.empty:
            msg = "Erro: Arquivo CSV est√° vazio"
            registrar_erro(msg)
            return None, msg
        return df, "Dados carregados com sucesso"
    except FileNotFoundError:
        msg = f"Erro: Arquivo n√£o encontrado - {caminho}"
        registrar_erro(msg)
        return None, msg
    except Exception as e:
        msg = f"Erro inesperado: {str(e)}"
        registrar_erro(msg)
        return None, msg

#Fun√ß√£o que valida os dados presentes no arquivo csv, se h√° algum campo vazio, etc.
def validar_dados(df):
    erros = []

    # Verifica nomes vazios
    if df['Nome'].isnull().any():
        erros.append("Existem alunos sem nome no registro")

    # Verifica nomes duplicados
    if df['Nome'].duplicated().any():
        erros.append("Existem nomes duplicados")

    # Verifica notas negativas
    notas_negativas = df[COLUNAS_NOTA].lt(0).any().any()
    if notas_negativas:
        erros.append("Existem notas negativas")

    if erros:
        msg = (" | ".join(erros))
        registrar_erro(msg)
        raise ValueError(msg)

#Fun√ß√£o que cacula as medias dos alunos al√©m de analisar se h√° algum erro como se h√° alguma string onde deveria haver numeros, se todas as colunas est√£o presentes, etc.
def calcular_medias(df):
    # Verifica se as colunas necess√°rias existem
    missing_cols = [col for col in COLUNAS_NOTA if col not in df.columns]

    if missing_cols:
        msg = f"[ERRO] Colunas ausentes: {missing_cols}"
        registrar_erro(msg)
        print(msg)
        return None, msg  # Retorna None para interromper o fluxo

    colunas_nao_numericas = [col for col in COLUNAS_NOTA if not pd.api.types.is_numeric_dtype(df[col])]
    if colunas_nao_numericas:
        msg = f"[ERRO] Colunas n√£o num√©ricas: {colunas_nao_numericas}"
        registrar_erro(msg)
        print(msg)
        return None, msg


    # C√°lculo das m√©dias (c√≥digo existente)
    df['M√©dia'] = df[COLUNAS_NOTA].mean(axis=1).round(2)
    df['Situa√ß√£o'] = df['M√©dia'].apply(lambda x: 'Aprovado' if x >= MEDIA_APROVACAO else 'Reprovado')
    return df, "M√©dias calculadas com sucesso"

#Fun√ß√£o que gera os graficos sobre a quantidade de alunos aprovados e um que exibe a m√©dia dos alunos
def gerar_visualizacoes(df, output_dir):
    """Gera gr√°ficos"""
    try:
        # Gr√°fico de distribui√ß√£o
        plt.figure(figsize=(10, 6))
        df['Situa√ß√£o'].value_counts().plot(
            kind='pie',
            autopct='%1.1f%%',
            colors=['#4CAF50', '#F44336'],
            title='Distribui√ß√£o de Aprova√ß√£o'
        )
        plt.savefig(os.path.join(output_dir, 'distribuicao.png'), bbox_inches='tight')
        plt.close()

        # Gr√°fico de desempenho individual
        plt.figure(figsize=(12, 6))
        df.sort_values('M√©dia').plot(
            x='Nome',
            y='M√©dia',
            kind='barh',
            color=df['Situa√ß√£o'].map({'Aprovado': '#4CAF50', 'Reprovado': '#F44336'}),
            title='Desempenho Individual'
        )
        plt.grid(axis='x', linestyle='--', alpha=0.7)
        plt.savefig(os.path.join(output_dir, 'desempenho.png'), bbox_inches='tight')
        plt.close()

    except Exception as e:
        registrar_erro(f"Erro na gera√ß√£o de gr√°ficos: {str(e)}")

#Fun√ß√£o que determina onde os resultados ser√£o exportados ao fim do c√≥digo, onde o arquivo csv com as analises ser√£o salvos
def exportar_resultados(df, output_path):
    try:
        df.to_csv(output_path, index=False, encoding='utf-8-sig')
        return f"Resultados exportados para {output_path}"
    except Exception as e:
        msg = f"Erro ao exportar resultados: {str(e)}"
        registrar_erro(msg)
        return msg

#Fun√ß√£o que gera um pdf com o relat√≥rio dos alunos, m√©dias, situa√ß√£o, nomes
def gerar_relatorio_pdf(df, output_path, graficos_paths=[]):
    """Gera um relat√≥rio PDF com base nos dados"""
    try:
        c = canvas.Canvas(output_path, pagesize=A4)
        largura, altura = A4

        # Cabe√ßalho
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, altura - 50, "Relat√≥rio de Desempenho dos Alunos")
        c.setFont("Helvetica", 12)
        c.drawString(50, altura - 70, f"Data de gera√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        c.setFont("Helvetica-Bold", 10)
        c.drawString(50, altura - 82, f"Voc√™ pode ver os gr√°ficos na segunda p√°gina")
        c.setFont("Helvetica", 12)


        # Estat√≠sticas
        total_alunos = len(df)
        aprovados = df['Situa√ß√£o'].value_counts().get('Aprovado', 0)
        reprovados = df['Situa√ß√£o'].value_counts().get('Reprovado', 0)

        c.drawString(50, altura - 100, f"Total de alunos: {total_alunos}")
        c.drawString(50, altura - 120, f"Aprovados: {aprovados}")
        c.drawString(50, altura - 140, f"Reprovados: {reprovados}")


        # Tabela simples
        y = altura - 180
        c.setFont("Helvetica-Bold", 10)
        c.drawString(50, y, "Nome")
        c.drawString(250, y, "M√©dia")
        c.drawString(350, y, "Situa√ß√£o")
        c.setFont("Helvetica", 10)

        y -= 20
        for _, row in df.iterrows():
            c.drawString(50, y, str(row['Nome']))
            c.drawString(250, y, f"{row['M√©dia']:.2f}")
            c.drawString(350, y, row['Situa√ß√£o'])
            y -= 15
            if y < 50:  # quebra de p√°gina
                c.showPage()
                y = altura - 50


        if graficos_paths:
            c.showPage()  # inicia nova p√°gina para os gr√°ficos
            c.setFont("Helvetica-Bold", 16)
            c.drawString(50, altura - 50, "Gr√°ficos de An√°lise")

            y_position = altura - 100

            for grafico in graficos_paths:
                if os.path.exists(grafico):
                    img_width, img_height = ImageReader(grafico).getSize()

                    # Ajusta a largura para no m√°ximo 500px e altura proporcional
                    max_width = 500
                    max_height = 350
                    scale = min(max_width / img_width, max_height / img_height)

                    new_width = img_width * scale
                    new_height = img_height * scale

                    # Desenha imagem centralizada
                    x_position = (largura - new_width) / 2
                    c.drawImage(grafico, x_position, y_position - new_height, width=new_width, height=new_height)

                    y_position -= new_height + 30  # espa√ßamento

                    # Se n√£o couber mais na p√°gina, cria nova
                    if y_position < 100:
                        c.showPage()
                        y_position = altura - 100

        # Salva o PDF
        c.save()
        print(f"‚úÖ Relat√≥rio PDF gerado em: {output_path}")

    except Exception as e:
        print(f"‚ùå Erro ao gerar PDF: {e}")


'''def gerar_feedback_ia(nome: str, notas: dict, media: float) -> str:
    cache = carregar_cache()
    cache_key = f"{nome}_{hash(frozenset(notas.items()))}"

    if cache_key in cache:
        return cache[cache_key]

    prompt = f"""
    Como especialista em educa√ß√£o, forne√ßa um feedback para {nome}:
    - Mat√©rias: {', '.join(f'{k}: {v:.1f}' for k, v in notas.items())}
    - M√©dia: {media:.1f}
    Diretrizes:
    1. Identifique 1 ponto forte
    2. Sugira 1 √°rea de melhoria
    3. M√°ximo 2 frases
    """

    try:
        # Mensagens com tipos espec√≠ficos
        messages = [
            ChatCompletionSystemMessageParam(
                role="system",
                content="Voc√™ √© um tutor educacional especializado."
            ),
            ChatCompletionUserMessageParam(
                role="user",
                content=prompt
            )
        ]

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,  # Agora com tipos corretos
            max_tokens=15
        )

        feedback = response.choices[0].message.content
        cache[cache_key] = feedback
        salvar_cache(cache)
        return feedback

    except Exception as e:
        registrar_erro(f"Erro na API: {str(e)}")
        return f"[Feedback temporariamente indispon√≠vel - {datetime.now().strftime('%H:%M')}]"
'''

def mostrar_analise(df):
    print("\n" + "=" * 50)
    print("üìä AN√ÅLISE COMPLETA")
    print("=" * 50)

    print("\nüîç Vis√£o Geral:")
    print(df.to_string())

    print("\nüìù Estat√≠sticas Descritivas:")
    print(df.describe())

    print(f"\nüìå Alunos em Recupera√ß√£o (M√©dia entre {RECUPERACAO_MIN} e {RECUPERACAO_MAX}):")
    recuperacao = df[df['M√©dia'].between(RECUPERACAO_MIN, RECUPERACAO_MAX)].sort_values('M√©dia')

    if not recuperacao.empty:
        for idx, row in recuperacao.iterrows():
            print(
                f"- {row['Nome']}: {row['M√©dia']:.1f} ({'‚û§ Precisa melhorar ' + ', '.join(col for col in COLUNAS_NOTA if row[col] < MEDIA_APROVACAO)})")
    else:
        print("Nenhum aluno em recupera√ß√£o")

    print("\nüéØ Top 3 Melhores Alunos:")
    print(df.nlargest(3, 'M√©dia')[['Nome', 'M√©dia']])

def main():
    try:
        script_dir = os.path.dirname(os.path.realpath(__file__))
        input_path = os.path.join(script_dir, '..', 'datasets', 'notas_alunos.csv')
        output_dir = os.path.join(script_dir, '..', DIRETORIO_SAIDA)
        os.makedirs(output_dir, exist_ok=True)

        df, msg = carregar_dados(input_path)
        if df is None:
            print(msg)
            return
        try:
            validar_dados(df)
        except ValueError as e:
            registrar_erro(f"Dados inv√°lidos: {e}")
            print(f"Erro: {e}")
            return

        df, msg = calcular_medias(df)
        if df is None:  # <- Nova verifica√ß√£o
            return

        mostrar_analise(df)
        print("\nCriando gr√°ficos para melhor vizualiza√ß√£o üìä\n")
        gerar_visualizacoes(df, output_dir)
        print(f"Gr√°ficos gerados, eles podem ser acessados em: {output_dir} como 'desempenho.png' e 'distribuicao.png'")

        output_path = os.path.join(output_dir, 'analise_completa.csv')
        print("\n" + exportar_resultados(df, output_path))

        resposta = input("Voc√™ deseja gerar um PDF com o relat√≥rio dos alunos? (Sim/N√£o): ").strip().lower()
        if resposta == 'sim' or resposta == 'Sim' or resposta == 's' or resposta == 'S':
            caminho_pdf = os.path.join(output_dir, 'relatorio_alunos.pdf')
            graficos = [
                os.path.join(output_dir, 'distribuicao.png'),
                os.path.join(output_dir, 'desempenho.png')
            ]
            gerar_relatorio_pdf(df, caminho_pdf, graficos_paths=graficos)

    except Exception as e:
        print(f"\n‚ùå Erro: {str(e)}")
        registrar_erro(f"Falha cr√≠tica: {str(e)}")

if __name__ == '__main__':
    main()